protocol method definition
--------------------------------------------------------------------------------------------------------------------------
overview
1, appointment notification protocol
2, schedule requiring protocol
3, coding tools
4, prototype

--------------------------------------------------------------------------------------------------------------------------
appointment notification protocol
constant:
used to define buffer.
const int APPOINTMENT_NOTIFICATION_PROTOCOL_REQUEST_MESSAGE_MAXIMUM_LENGTH = 800;


//level 1: application layer API

(1) API for appointment module of APO
void  appointmentNotification_protocol_API_(struct SAppointment ap,  int wp);

 input:
appoinement information:  struct SAppointment ap
write pointer: int wp
output:
deliver the message the user process by write pointer -- wp
process:
encoding / write



//level 2: presentation layer interface

1, representation of request message:
byte 0-3: port number -- 1
byte 4-7: message length
byte 8 - n: coding format of SAppointment ap   (define by yourself)
(no need to transfer the caller & callee of the appointment)


2, methods
(1) encoding
char * appointmentNotification_protocol_requestMessage_encoding(struct SAppointment ap);
(2) decoding
struct SAppointment appointmentNotification_protocol_requestMessage_decoding(char *message);

! make sure that the decoding & encoding process are corresponding to each other


//--------------------------------------------------------------------------------------------------------------------------
schedule requiring protocol
functionality:

//level 1: application layer API

constant:
maximum length of message: used to define buffer.
const int SCHHEDULE_REQUERING_PROTOCOL_REQUEST_MESSAGE_MAXIMUM_LENGTH = 800 ;
const int SCHEDULE_REQUERING_PROTOCOL_RESPONSE_MESSAGE_MAXIMUM_LENGTH  = 800;

1, recipient API:
recipient: parent process / APO
request user's personal schedule based on particular scheduling algorithm

int  scheduleRequering_protocol_recipientAPI_(enum SCHEDULING_ALGORITHM algorithm, int rp, int wp, int** personalSchedule);

(1) input:
algorthm name: enum SCHEDULING_ALGORITHM algorithm
IPC pointer: int rp, int wp

(2) output:
1' personal schedule matrix : int** personalSchedule
(save the result to the pointer) dynamic allocated 2d array.

format:
size: 2 * n (n -- number of personal appointment)
first row: index of appointment
second row: response    (accept -- 1, reject -- 0)

example:
1   4   9   11
1   0   0   1
the user have 4 appointments in total: 2 accepted -- 1, 11. two rejected -- 4, 9

2' size of personalSchedule
return the personalSchedule matrix's column numbers

(3) process
1' request message
encoding  / write
2' response message
/ read / decoding / return


(2) server API:
server:  child process / user
interpret the request message, do the scheduling analysis, and write back the analysis result: personal schedule

void  scheduleRequering_protocol_serverAPI(char* requestMessage, int wp, struct SAppointment ap_array[], int arraySize);

1'input
request message:
write pointer:  int wp,
personal appoinement array: struct SAppointment ap_array[], int arraySize

2' output
write the personal schedule back by write pointer

3' process
request message: decoding
get personal schedule: invoke the scheduling algorithm function.  (the interface of scheduling algorithm will be provided later)
response message: encoding / write.
release the recourse


//level 2: presentation layer interface
1, request message
size:
12 bytes

representation:
byte 0-3: port number-- 2
byte 4-7: length of message
byte 8-11: mode of algorithm

algorithm mode is the value of enum SCHEDULING_ALGORITHM.
algorithm to mode: directly
mode to algorithm:  enum SCHEDULING_ALGORITHM getSCHEDULING_ALGORITHM (int mode);

interface:
char * scheduleRequering_protocol_requestMessage_encoding(enum SCHEDULING_ALGORITHM algorithm);
enum SCHEDULING_ALGORITHM scheduleRequering_protocol_requestMessage_decoding(char *message);

2, response message
original format:
personal schedule matrix: as above

coding format:
byte 0-3: port number-- 2
byte 4-7: length of message
byte 8-11: size of personal schedule matrix
byte 12-n: representation of personal schedule matrix ----define by yourself.

interface:
char * scheduleRequering_protocol_responseMessage_encoding(int** personalScheduleArray);
int scheduleRequering_protocol_responseMessage_decoding(char *message, int** personalSchedule);

--------------------------------------------------------------------------------------------------------------------------
coding tools:

encoding integer:
int integer_little_endian_decoding(char* src);
void integer_little_endian_encoding (int num, char* dst);

encoding time:
char* time_encoding (struct STime time);
struct STime time_decoding (char* str);
(need to implement)

--------------------------------------------------------------------------------------------------------------------------
prototype:

have the same encapsulation structure of this program.
have yet to complete debugging (the error perhaps occurs at string manipulation)